<span class="hljs-keyword">module</span> ietf-netconf {

  // the <span class="hljs-keyword">namespace</span> for NETCONF XML definitions is unchanged
  // from RFC 4741, which this document replaces
  <span class="hljs-keyword">namespace</span> &quot;urn:ietf:params:xml:ns:netconf:<span class="hljs-keyword">base</span>:1.0&quot;;

  <span class="hljs-keyword">prefix</span> nc;

  <span class="hljs-keyword">import</span> ietf-inet-types {
    <span class="hljs-keyword">prefix</span> inet;
  }

  <span class="hljs-keyword">organization</span>
    &quot;IETF NETCONF (Network Configuration) Working Group&quot;;

  <span class="hljs-keyword">contact</span>
    &quot;WG Web:   &lt;http://tools.ietf.org/wg/netconf/&gt;
     WG List:  &lt;netconf@ietf.org&gt;

     WG Chair: Bert Wijnen
               &lt;bertietf@bwijnen.net&gt;

     WG Chair: Mehmet Ersue
               &lt;mehmet.ersue@nsn.com&gt;

     Editor:   Martin Bjorklund
               &lt;mbj@tail-f.com&gt;

     Editor:   Juergen Schoenwaelder
               &lt;j.schoenwaelder@jacobs-university.de&gt;

     Editor:   Andy Bierman
               &lt;andy.bierman@brocade.com&gt;&quot;;
  <span class="hljs-keyword">description</span>
    &quot;NETCONF Protocol Data Types and Protocol Operations.

     Copyright (c) 2011 IETF Trust and the persons identified as
     the document authors.  All rights reserved.

     Redistribution and use in source and <span class="hljs-type">binary</span> forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust&#x27;s Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG <span class="hljs-keyword">module</span> is part of RFC 6241; see
     the RFC itself for full legal notices.&quot;;
  <span class="hljs-keyword">revision</span> 2011-06-01 {
    <span class="hljs-keyword">description</span>
      &quot;Initial <span class="hljs-keyword">revision</span>&quot;;
    <span class="hljs-keyword">reference</span>
      &quot;RFC 6241: Network Configuration Protocol&quot;;
  }

  <span class="hljs-keyword">extension</span> get-filter-element-attributes {
    <span class="hljs-keyword">description</span>
      &quot;If this <span class="hljs-keyword">extension</span> is present within an &#x27;<span class="hljs-keyword">anyxml</span>&#x27;
       statement named &#x27;filter&#x27;, which <span class="hljs-keyword">must</span> be conceptually
       defined within the RPC <span class="hljs-keyword">input</span> section for the &lt;get&gt;
       and &lt;get-config&gt; protocol operations, then the
       following unqualified XML attribute is supported
       within the &lt;filter&gt; element, within a &lt;get&gt; or
       &lt;get-config&gt; protocol operation:

         <span class="hljs-keyword">type</span> : optional attribute with allowed
                value strings &#x27;subtree&#x27; and &#x27;xpath&#x27;.
                If missing, the <span class="hljs-keyword">default</span> value is &#x27;subtree&#x27;.

       If the &#x27;xpath&#x27; <span class="hljs-keyword">feature</span> is supported, then the
       following unqualified XML attribute is
       also supported:

         select: optional attribute containing a
                 <span class="hljs-type">string</span> representing an XPath expression.
                 The &#x27;<span class="hljs-keyword">type</span>&#x27; attribute <span class="hljs-keyword">must</span> be equal to &#x27;xpath&#x27;
                 if this attribute is present.&quot;;
  }

  // NETCONF capabilities defined as features
  <span class="hljs-keyword">feature</span> writable-running {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :writable-running capability;
       If the server advertises the :writable-running
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.2&quot;;
  }

  <span class="hljs-keyword">feature</span> candidate {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :candidate capability;
       If the server advertises the :candidate
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3&quot;;
  }

  <span class="hljs-keyword">feature</span> confirmed-commit {
    <span class="hljs-keyword">if-feature</span> candidate;
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :confirmed-commit:1.1 capability;
       If the server advertises the :confirmed-commit:1.1
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.4&quot;;
  }

  <span class="hljs-keyword">feature</span> rollback-on-error {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :rollback-on-error capability;
       If the server advertises the :rollback-on-error
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.5&quot;;
  }

  <span class="hljs-keyword">feature</span> validate {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :validate:1.1 capability;
       If the server advertises the :validate:1.1
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.6&quot;;
  }

  <span class="hljs-keyword">feature</span> startup {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :startup capability;
       If the server advertises the :startup
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.7&quot;;
  }

  <span class="hljs-keyword">feature</span> url {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :url capability;
       If the server advertises the :url
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.8&quot;;
  }

  <span class="hljs-keyword">feature</span> xpath {
    <span class="hljs-keyword">description</span>
      &quot;NETCONF :xpath capability;
       If the server advertises the :xpath
       capability for a session, then this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span>
       also be enabled for that session.  Otherwise,
       this <span class="hljs-keyword">feature</span> <span class="hljs-keyword">must</span> not be enabled.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.9&quot;;
  }

  // NETCONF Simple Types

  <span class="hljs-keyword">typedef</span> session-id-type {
    <span class="hljs-keyword">type</span> <span class="hljs-type">uint32</span> {
      <span class="hljs-keyword">range</span> &quot;1..max&quot;;
    }
    <span class="hljs-keyword">description</span>
      &quot;NETCONF Session Id&quot;;
  }

  <span class="hljs-keyword">typedef</span> session-id-or-zero-type {
    <span class="hljs-keyword">type</span> <span class="hljs-type">uint32</span>;
    <span class="hljs-keyword">description</span>
      &quot;NETCONF Session Id or Zero to indicate none&quot;;
  }
  <span class="hljs-keyword">typedef</span> error-tag-type {
    <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
       <span class="hljs-keyword">enum</span> in-use {
         <span class="hljs-keyword">description</span>
           &quot;The request requires a resource that
            already is in use.&quot;;
       }
       <span class="hljs-keyword">enum</span> invalid-value {
         <span class="hljs-keyword">description</span>
           &quot;The request specifies an unacceptable value for one
            or more parameters.&quot;;
       }
       <span class="hljs-keyword">enum</span> too-big {
         <span class="hljs-keyword">description</span>
           &quot;The request or response (that would be generated) is
            too large for the implementation to handle.&quot;;
       }
       <span class="hljs-keyword">enum</span> missing-attribute {
         <span class="hljs-keyword">description</span>
           &quot;An expected attribute is missing.&quot;;
       }
       <span class="hljs-keyword">enum</span> bad-attribute {
         <span class="hljs-keyword">description</span>
           &quot;An attribute value is not correct; e.g., wrong <span class="hljs-keyword">type</span>,
            out of <span class="hljs-keyword">range</span>, <span class="hljs-keyword">pattern</span> mismatch.&quot;;
       }
       <span class="hljs-keyword">enum</span> unknown-attribute {
         <span class="hljs-keyword">description</span>
           &quot;An unexpected attribute is present.&quot;;
       }
       <span class="hljs-keyword">enum</span> missing-element {
         <span class="hljs-keyword">description</span>
           &quot;An expected element is missing.&quot;;
       }
       <span class="hljs-keyword">enum</span> bad-element {
         <span class="hljs-keyword">description</span>
           &quot;An element value is not correct; e.g., wrong <span class="hljs-keyword">type</span>,
            out of <span class="hljs-keyword">range</span>, <span class="hljs-keyword">pattern</span> mismatch.&quot;;
       }
       <span class="hljs-keyword">enum</span> unknown-element {
         <span class="hljs-keyword">description</span>
           &quot;An unexpected element is present.&quot;;
       }
       <span class="hljs-keyword">enum</span> unknown-namespace {
         <span class="hljs-keyword">description</span>
           &quot;An unexpected <span class="hljs-keyword">namespace</span> is present.&quot;;
       }
       <span class="hljs-keyword">enum</span> access-denied {
         <span class="hljs-keyword">description</span>
           &quot;Access to the requested protocol operation or
            data model is denied because authorization failed.&quot;;
       }
       <span class="hljs-keyword">enum</span> lock-denied {
         <span class="hljs-keyword">description</span>
           &quot;Access to the requested lock is denied because the
            lock is currently held by another entity.&quot;;
       }
       <span class="hljs-keyword">enum</span> resource-denied {
         <span class="hljs-keyword">description</span>
           &quot;Request could not be completed because of
            insufficient resources.&quot;;
       }
       <span class="hljs-keyword">enum</span> rollback-failed {
         <span class="hljs-keyword">description</span>
           &quot;Request to roll back some configuration change (via
            rollback-on-error or &lt;discard-changes&gt; operations)
            was not completed for some reason.&quot;;

       }
       <span class="hljs-keyword">enum</span> data-exists {
         <span class="hljs-keyword">description</span>
           &quot;Request could not be completed because the relevant
            data model content already exists.  For example,
            a &#x27;create&#x27; operation was attempted on data that
            already exists.&quot;;
       }
       <span class="hljs-keyword">enum</span> data-missing {
         <span class="hljs-keyword">description</span>
           &quot;Request could not be completed because the relevant
            data model content does not exist.  For example,
            a &#x27;delete&#x27; operation was attempted on
            data that does not exist.&quot;;
       }
       <span class="hljs-keyword">enum</span> operation-not-supported {
         <span class="hljs-keyword">description</span>
           &quot;Request could not be completed because the requested
            operation is not supported by this implementation.&quot;;
       }
       <span class="hljs-keyword">enum</span> operation-failed {
         <span class="hljs-keyword">description</span>
           &quot;Request could not be completed because the requested
            operation failed for some reason not covered by
            any other error condition.&quot;;
       }
       <span class="hljs-keyword">enum</span> partial-operation {
         <span class="hljs-keyword">description</span>
           &quot;This error-tag is obsolete, and SHOULD NOT be sent
            by servers conforming to this document.&quot;;
       }
       <span class="hljs-keyword">enum</span> malformed-message {
         <span class="hljs-keyword">description</span>
           &quot;A message could not be handled because it failed to
            be parsed correctly.  For example, the message is not
            well-formed XML or it <span class="hljs-keyword">uses</span> an invalid character set.&quot;;
       }
     }
     <span class="hljs-keyword">description</span> &quot;NETCONF Error Tag&quot;;
     <span class="hljs-keyword">reference</span> &quot;RFC 6241, Appendix A&quot;;
  }

  <span class="hljs-keyword">typedef</span> error-severity-type {
    <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
      <span class="hljs-keyword">enum</span> error {
        <span class="hljs-keyword">description</span> &quot;Error severity&quot;;
      }
      <span class="hljs-keyword">enum</span> warning {
        <span class="hljs-keyword">description</span> &quot;Warning severity&quot;;
      }
    }
    <span class="hljs-keyword">description</span> &quot;NETCONF Error Severity&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 4.3&quot;;
  }

  <span class="hljs-keyword">typedef</span> edit-operation-type {
    <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
      <span class="hljs-keyword">enum</span> merge {
        <span class="hljs-keyword">description</span>
          &quot;The configuration data identified by the
           element containing this attribute is merged
           with the configuration at the corresponding
           level in the configuration datastore identified
           by the target parameter.&quot;;
      }
      <span class="hljs-keyword">enum</span> replace {
        <span class="hljs-keyword">description</span>
          &quot;The configuration data identified by the element
           containing this attribute replaces any related
           configuration in the configuration datastore
           identified by the target parameter.  If no such
           configuration data exists in the configuration
           datastore, it is created.  Unlike a
           &lt;copy-config&gt; operation, which replaces the
           entire target configuration, only the configuration
           actually present in the <span class="hljs-keyword">config</span> parameter is affected.&quot;;
      }
      <span class="hljs-keyword">enum</span> create {
        <span class="hljs-keyword">description</span>
          &quot;The configuration data identified by the element
           containing this attribute is added to the
           configuration if and only if the configuration
           data does not already exist in the configuration
           datastore.  If the configuration data exists, an
           &lt;rpc-error&gt; element is returned with an
           &lt;error-tag&gt; value of &#x27;data-exists&#x27;.&quot;;
      }
      <span class="hljs-keyword">enum</span> delete {
        <span class="hljs-keyword">description</span>
          &quot;The configuration data identified by the element
           containing this attribute is deleted from the
           configuration if and only if the configuration
           data currently exists in the configuration
           datastore.  If the configuration data does not
           exist, an &lt;rpc-error&gt; element is returned with
           an &lt;error-tag&gt; value of &#x27;data-missing&#x27;.&quot;;
      }
      <span class="hljs-keyword">enum</span> remove {
        <span class="hljs-keyword">description</span>
          &quot;The configuration data identified by the element
           containing this attribute is deleted from the
           configuration if the configuration
           data currently exists in the configuration
           datastore.  If the configuration data does not
           exist, the &#x27;remove&#x27; operation is silently ignored
           by the server.&quot;;
      }
    }
    <span class="hljs-keyword">default</span> &quot;merge&quot;;
    <span class="hljs-keyword">description</span> &quot;NETCONF &#x27;operation&#x27; attribute values&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.2&quot;;
  }

  // NETCONF Standard Protocol Operations

  <span class="hljs-keyword">rpc</span> get-config {
    <span class="hljs-keyword">description</span>
      &quot;Retrieve all or part of a specified configuration.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.1&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> source {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to retrieve.&quot;;

        <span class="hljs-keyword">choice</span> config-source {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration to retrieve.&quot;;
          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> source.
               This is optional-to-implement on the server because
               not all servers will support filtering for this
               datastore.&quot;;
          }
        }
      }

      <span class="hljs-keyword">anyxml</span> filter {
        <span class="hljs-keyword">description</span>
          &quot;Subtree or XPath filter to use.&quot;;
        nc:get-filter-element-attributes;
      }
    }

    <span class="hljs-keyword">output</span> {
      <span class="hljs-keyword">anyxml</span> data {
        <span class="hljs-keyword">description</span>
          &quot;Copy of the source datastore subset that matched
           the filter criteria (if any).  An <span class="hljs-type">empty</span> data <span class="hljs-keyword">container</span>
           indicates that the request did not produce any results.&quot;;
      }
    }
  }

  <span class="hljs-keyword">rpc</span> edit-config {
    <span class="hljs-keyword">description</span>
      &quot;The &lt;edit-config&gt; operation loads all or part of a specified
       configuration to the specified target configuration.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.2&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> target {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to edit.&quot;;

        <span class="hljs-keyword">choice</span> config-target {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration target.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">if-feature</span> writable-running;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
        }
      }

      <span class="hljs-keyword">leaf</span> default-operation {
        <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
          <span class="hljs-keyword">enum</span> merge {
            <span class="hljs-keyword">description</span>
              &quot;The <span class="hljs-keyword">default</span> operation is merge.&quot;;
          }
          <span class="hljs-keyword">enum</span> replace {
            <span class="hljs-keyword">description</span>
              &quot;The <span class="hljs-keyword">default</span> operation is replace.&quot;;
          }
          <span class="hljs-keyword">enum</span> none {
            <span class="hljs-keyword">description</span>
              &quot;There is no <span class="hljs-keyword">default</span> operation.&quot;;
          }
        }
        <span class="hljs-keyword">default</span> &quot;merge&quot;;
        <span class="hljs-keyword">description</span>
          &quot;The <span class="hljs-keyword">default</span> operation to use.&quot;;
      }

      <span class="hljs-keyword">leaf</span> test-option {
        <span class="hljs-keyword">if-feature</span> validate;
        <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
          <span class="hljs-keyword">enum</span> test-then-set {
            <span class="hljs-keyword">description</span>
              &quot;The server will test and then set if no errors.&quot;;
          }
          <span class="hljs-keyword">enum</span> set {
            <span class="hljs-keyword">description</span>
              &quot;The server will set without a test first.&quot;;
          }

          <span class="hljs-keyword">enum</span> test-only {
            <span class="hljs-keyword">description</span>
              &quot;The server will only test and not set, even
               if there are no errors.&quot;;
          }
        }
        <span class="hljs-keyword">default</span> &quot;test-then-set&quot;;
        <span class="hljs-keyword">description</span>
          &quot;The test option to use.&quot;;
      }

      <span class="hljs-keyword">leaf</span> error-option {
        <span class="hljs-keyword">type</span> <span class="hljs-type">enumeration</span> {
          <span class="hljs-keyword">enum</span> stop-on-error {
            <span class="hljs-keyword">description</span>
              &quot;The server will stop on errors.&quot;;
          }
          <span class="hljs-keyword">enum</span> continue-on-error {
            <span class="hljs-keyword">description</span>
              &quot;The server may continue on errors.&quot;;
          }
          <span class="hljs-keyword">enum</span> rollback-on-error {
            <span class="hljs-keyword">description</span>
              &quot;The server will roll back on errors.
               This value can only be used if the &#x27;rollback-on-error&#x27;
               <span class="hljs-keyword">feature</span> is supported.&quot;;
          }
        }
        <span class="hljs-keyword">default</span> &quot;stop-on-error&quot;;
        <span class="hljs-keyword">description</span>
          &quot;The error option to use.&quot;;
      }

      <span class="hljs-keyword">choice</span> edit-content {
        <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
        <span class="hljs-keyword">description</span>
          &quot;The content for the edit operation.&quot;;

        <span class="hljs-keyword">anyxml</span> <span class="hljs-keyword">config</span> {
          <span class="hljs-keyword">description</span>
            &quot;Inline Config content.&quot;;
        }
        <span class="hljs-keyword">leaf</span> url {
          <span class="hljs-keyword">if-feature</span> url;
          <span class="hljs-keyword">type</span> inet:uri;
          <span class="hljs-keyword">description</span>
            &quot;URL-based <span class="hljs-keyword">config</span> content.&quot;;
        }
      }
    }
  }

  <span class="hljs-keyword">rpc</span> copy-config {
    <span class="hljs-keyword">description</span>
      &quot;Create or replace an entire configuration datastore with the
       contents of another complete configuration datastore.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.3&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> target {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to copy to.&quot;;

        <span class="hljs-keyword">choice</span> config-target {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration target of the copy operation.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">if-feature</span> writable-running;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> target.
               This is optional-to-implement on the server.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> url {
            <span class="hljs-keyword">if-feature</span> url;
            <span class="hljs-keyword">type</span> inet:uri;
            <span class="hljs-keyword">description</span>
              &quot;The URL-based configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
        }
      }

      <span class="hljs-keyword">container</span> source {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to copy from.&quot;;

        <span class="hljs-keyword">choice</span> config-source {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration source for the copy operation.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> url {
            <span class="hljs-keyword">if-feature</span> url;
            <span class="hljs-keyword">type</span> inet:uri;
            <span class="hljs-keyword">description</span>
              &quot;The URL-based configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">anyxml</span> <span class="hljs-keyword">config</span> {
            <span class="hljs-keyword">description</span>
              &quot;Inline Config content: &lt;<span class="hljs-keyword">config</span>&gt; element.  Represents
               an entire configuration datastore, not
               a subset of the running datastore.&quot;;
          }
        }
      }
    }
  }

  <span class="hljs-keyword">rpc</span> delete-config {
    <span class="hljs-keyword">description</span>
      &quot;Delete a configuration datastore.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.4&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> target {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to delete.&quot;;

        <span class="hljs-keyword">choice</span> config-target {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration target to delete.&quot;;

          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> url {
            <span class="hljs-keyword">if-feature</span> url;
            <span class="hljs-keyword">type</span> inet:uri;
            <span class="hljs-keyword">description</span>
              &quot;The URL-based configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
        }
      }
    }
  }

  <span class="hljs-keyword">rpc</span> lock {
    <span class="hljs-keyword">description</span>
      &quot;The lock operation allows the client to lock the configuration
       system of a device.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.5&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> target {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to lock.&quot;;

        <span class="hljs-keyword">choice</span> config-target {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration target to lock.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
        }
      }
    }
  }

  <span class="hljs-keyword">rpc</span> unlock {
    <span class="hljs-keyword">description</span>
      &quot;The unlock operation is used to release a configuration lock,
       previously obtained with the &#x27;lock&#x27; operation.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.6&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> target {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to unlock.&quot;;

        <span class="hljs-keyword">choice</span> config-target {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration target to unlock.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> target.&quot;;
          }
        }
      }
    }
  }

  <span class="hljs-keyword">rpc</span> get {
    <span class="hljs-keyword">description</span>
      &quot;Retrieve running configuration and device state information.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.7&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">anyxml</span> filter {
        <span class="hljs-keyword">description</span>
          &quot;This parameter specifies the portion of the system
           configuration and state data to retrieve.&quot;;
        nc:get-filter-element-attributes;
      }
    }

    <span class="hljs-keyword">output</span> {
      <span class="hljs-keyword">anyxml</span> data {
        <span class="hljs-keyword">description</span>
          &quot;Copy of the running datastore subset and/or state
           data that matched the filter criteria (if any).
           An <span class="hljs-type">empty</span> data <span class="hljs-keyword">container</span> indicates that the request did not
           produce any results.&quot;;
      }
    }
  }

  <span class="hljs-keyword">rpc</span> close-session {
    <span class="hljs-keyword">description</span>
      &quot;Request graceful termination of a NETCONF session.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.8&quot;;
  }

  <span class="hljs-keyword">rpc</span> kill-session {
    <span class="hljs-keyword">description</span>
      &quot;Force the termination of a NETCONF session.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 7.9&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">leaf</span> session-id {
        <span class="hljs-keyword">type</span> session-id-type;
        <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
        <span class="hljs-keyword">description</span>
          &quot;Particular session to kill.&quot;;
      }
    }
  }

  <span class="hljs-keyword">rpc</span> commit {
    <span class="hljs-keyword">if-feature</span> candidate;

    <span class="hljs-keyword">description</span>
      &quot;Commit the candidate configuration as the device&#x27;s new
       <span class="hljs-built_in">current</span> configuration.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.1&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">leaf</span> confirmed {
        <span class="hljs-keyword">if-feature</span> confirmed-commit;
        <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
        <span class="hljs-keyword">description</span>
          &quot;Requests a confirmed commit.&quot;;
        <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.1&quot;;
      }

      <span class="hljs-keyword">leaf</span> confirm-timeout {
        <span class="hljs-keyword">if-feature</span> confirmed-commit;
        <span class="hljs-keyword">type</span> <span class="hljs-type">uint32</span> {
          <span class="hljs-keyword">range</span> &quot;1..max&quot;;
        }
        <span class="hljs-keyword">units</span> &quot;seconds&quot;;
        <span class="hljs-keyword">default</span> &quot;600&quot;;   // 10 minutes
        <span class="hljs-keyword">description</span>
          &quot;The timeout interval for a confirmed commit.&quot;;
        <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.1&quot;;
      }

      <span class="hljs-keyword">leaf</span> persist {
        <span class="hljs-keyword">if-feature</span> confirmed-commit;
        <span class="hljs-keyword">type</span> <span class="hljs-type">string</span>;
        <span class="hljs-keyword">description</span>
          &quot;This parameter is used to make a confirmed commit
           persistent.  A persistent confirmed commit is not aborted
           if the NETCONF session terminates.  The only way to abort
           a persistent confirmed commit is to let the timer expire,
           or to use the &lt;cancel-commit&gt; operation.

           The value of this parameter is a token that <span class="hljs-keyword">must</span> be given
           in the &#x27;persist-id&#x27; parameter of &lt;commit&gt; or
           &lt;cancel-commit&gt; operations in order to confirm or cancel
           the persistent confirmed commit.

           The token should be a random <span class="hljs-type">string</span>.&quot;;
        <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.1&quot;;
      }

      <span class="hljs-keyword">leaf</span> persist-id {
        <span class="hljs-keyword">if-feature</span> confirmed-commit;
        <span class="hljs-keyword">type</span> <span class="hljs-type">string</span>;
        <span class="hljs-keyword">description</span>
          &quot;This parameter is given in order to commit a persistent
           confirmed commit.  The value <span class="hljs-keyword">must</span> be equal to the value
           given in the &#x27;persist&#x27; parameter to the &lt;commit&gt; operation.
           If it does not match, the operation fails with an
          &#x27;invalid-value&#x27; error.&quot;;
        <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.1&quot;;
      }

    }
  }

  <span class="hljs-keyword">rpc</span> discard-changes {
    <span class="hljs-keyword">if-feature</span> candidate;

    <span class="hljs-keyword">description</span>
      &quot;Revert the candidate configuration to the <span class="hljs-built_in">current</span>
       running configuration.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.3.4.2&quot;;
  }

  <span class="hljs-keyword">rpc</span> cancel-commit {
    <span class="hljs-keyword">if-feature</span> confirmed-commit;
    <span class="hljs-keyword">description</span>
      &quot;This operation is used to cancel an ongoing confirmed commit.
       If the confirmed commit is persistent, the parameter
       &#x27;persist-id&#x27; <span class="hljs-keyword">must</span> be given, and it <span class="hljs-keyword">must</span> match the value of the
       &#x27;persist&#x27; parameter.&quot;;
    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.4.4.1&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">leaf</span> persist-id {
        <span class="hljs-keyword">type</span> <span class="hljs-type">string</span>;
        <span class="hljs-keyword">description</span>
          &quot;This parameter is given in order to cancel a persistent
           confirmed commit.  The value <span class="hljs-keyword">must</span> be equal to the value
           given in the &#x27;persist&#x27; parameter to the &lt;commit&gt; operation.
           If it does not match, the operation fails with an
          &#x27;invalid-value&#x27; error.&quot;;
      }
    }
  }

  <span class="hljs-keyword">rpc</span> validate {
    <span class="hljs-keyword">if-feature</span> validate;

    <span class="hljs-keyword">description</span>
      &quot;Validates the contents of the specified configuration.&quot;;

    <span class="hljs-keyword">reference</span> &quot;RFC 6241, Section 8.6.4.1&quot;;

    <span class="hljs-keyword">input</span> {
      <span class="hljs-keyword">container</span> source {
        <span class="hljs-keyword">description</span>
          &quot;Particular configuration to validate.&quot;;

        <span class="hljs-keyword">choice</span> config-source {
          <span class="hljs-keyword">mandatory</span> <span class="hljs-literal">true</span>;
          <span class="hljs-keyword">description</span>
            &quot;The configuration source to validate.&quot;;

          <span class="hljs-keyword">leaf</span> candidate {
            <span class="hljs-keyword">if-feature</span> candidate;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The candidate configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> running {
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The running configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> startup {
            <span class="hljs-keyword">if-feature</span> startup;
            <span class="hljs-keyword">type</span> <span class="hljs-type">empty</span>;
            <span class="hljs-keyword">description</span>
              &quot;The startup configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">leaf</span> url {
            <span class="hljs-keyword">if-feature</span> url;
            <span class="hljs-keyword">type</span> inet:uri;
            <span class="hljs-keyword">description</span>
              &quot;The URL-based configuration is the <span class="hljs-keyword">config</span> source.&quot;;
          }
          <span class="hljs-keyword">anyxml</span> <span class="hljs-keyword">config</span> {
            <span class="hljs-keyword">description</span>
              &quot;Inline Config content: &lt;<span class="hljs-keyword">config</span>&gt; element.  Represents
               an entire configuration datastore, not
               a subset of the running datastore.&quot;;
          }
        }
      }
    }
  }

}
